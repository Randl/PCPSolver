//////////////////////////////////////////////////////////////////////////////// 
// def.h                                                                      //
// Description: global definitions (used by all modules)                      //  
// Created time:   Feb  2, 2003                                               //  
// Modified time:  Feb  3, 2003                                               //  
// Author: Ling Zhao (zhao@cs.ualberta.ca)                                    // 
////////////////////////////////////////////////////////////////////////////////     

#ifndef DEF_H
#define DEF_H

#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <assert.h>
#include <ctype.h>


//////////////////////////////////////////////////////////////////////
// output the node number searched every several thousand nodes     
//////////////////////////////////////////////////////////////////////
//#define OUTPUTNODENUM

//////////////////////////////////////////////////////////////////////
// output the basic solving results like the results of those 
// methods used
//////////////////////////////////////////////////////////////////////
#define SOLVER_OUTPUT

//////////////////////////////////////////////////////////////////////
// use the number of nodes visited or cut off as the stopping 
// condition the thresholds node_num_threshold and 
// cutoff_num_threshold are defined in global.h. 
//////////////////////////////////////////////////////////////////////
//#define NODE_EXCEEDED_EXIT


//////////////////////////////////////////////////////////////////////
// Use the exclusion method, the resulted 'unsolvable' may have 
// solutions, but no solutions with all pairs used
//////////////////////////////////////////////////////////////////////
#define USE_EXCLUSION

//////////////////////////////////////////////////////////////////////
// using memory pool for the allocation of cache and runtime config
//////////////////////////////////////////////////////////////////////
#define USE_OWN_CACHE
#define USE_CONFIG_POOL

//////////////////////////////////////////////////////////////////////
// Heuristics used
//////////////////////////////////////////////////////////////////////
// #define USE_ELEMENT_BALANCE_HEURISTIC
#define USE_LENGTH_BALANCE_HEURISTIC

//////////////////////////////////////////////////////////////////////
// size and width and maximum depth to search
//////////////////////////////////////////////////////////////////////
#define MAXWIDTH 16
#define MAXSIZE 15
#define MAXDEPTH 1000

//////////////////////////////////////////////////////////////////////
// size of hash table
//////////////////////////////////////////////////////////////////////
#define HASHTABLESIZE  (1<<18)
//2097152 2087111

//////////////////////////////////////////////////////////////////////
// parameters for cache 
//////////////////////////////////////////////////////////////////////
#define MAXUSEDCONFIGSIZE (1<<13)  //cache size
#define ESTIMATE_AVERAGE_CONFIG_LENGTH (128-12)*8 //12=sizeof(CConfig0
#define CACHE_SIZE MAXUSEDCONFIGSIZE*128

//////////////////////////////////////////////////////////////////////
// parameters for config
//////////////////////////////////////////////////////////////////////
#define MAX_DEPTH 1000
#define CONFIG_SIZE MAXDEPTH*1000   // size of the config pool

//////////////////////////////////////////////////////////////////////
// direct jump parameters in solver.cpp
//////////////////////////////////////////////////////////////////////
#define MAXLOOPCOUNT 10

//////////////////////////////////////////////////////////////////////
// timing
//////////////////////////////////////////////////////////////////////
#define data_clocks_per_sec CLOCKS_PER_SEC
//int data_clocks_per_sec = 1000000;

//////////////////////////////////////////////////////////////////////
// Basic type to store configs, you can choose any other type as you
// want, as long as you keep it unsigned (for the shifting operation)
//////////////////////////////////////////////////////////////////////
typedef unsigned long STRINGTYPE;

//////////////////////////////////////////////////////////////////////
// state during the search
//////////////////////////////////////////////////////////////////////
enum STATUS { FIND_MASK, COMPARE_DIRECTION, ITERATIVE_SEARCH, 
              DETERMINANT_SEARCH, EXCLUSION_METHOD			 };

const char SENTINEL =(unsigned char)255;

//////////////////////////////////////////////////////////////////////
// input output control
//////////////////////////////////////////////////////////////////////
#define MAXINPUTLINELEN 1000
#endif

